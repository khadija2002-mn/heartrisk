# -*- coding: utf-8 -*-
"""heartrisk.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F0j9Jh6rOVukx9dYnD5PEb2Pn4V40xJX
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/heartrisk

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Lecture du fichier
df = pd.read_csv("/content/drive/My Drive/heartrisk/Medicaldataset (3).csv", sep=";")
df

df['Result'] = LabelEncoder().fit_transform(df['Result'])

print(df.isnull().sum())  # Affiche le nombre de valeurs manquantes par colonne

df = df.dropna()

df

X = df.drop('Result', axis=1)
y = df['Result']

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential([
    Dense(64, activation='relu', input_shape=(X.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')  # car classification binaire
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(X, y, epochs=50, batch_size=16, validation_split=0.2)

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report

# Affichage des performances
y_pred = model.predict(X) > 0.5

print(confusion_matrix(y, y_pred))
print(classification_report(y, y_pred))





